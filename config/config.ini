; news-from-ai/config/config.ini
; AI新闻聚合器 配置文件

[database]
db_host = "localhost"
db_name = "news_from_ai_db"
db_user = "root"
db_password = ""
db_charset = "utf8mb4"

[logging]
log_file = "../logs/app.log" ; 相对于 src 目录或者项目根目录，需要统一处理路径
log_level = "DEBUG" ; 日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)

[app]
site_title = "AI新闻聚合器"
items_per_page = 10 ; 每页显示新闻数量 (未来分页功能)

[theme]
default_theme = "auto" ; 'auto', 'light', 'dark' - auto会根据时间切换

; -----------------------------------------------------------------------------
; AI 配置
; -----------------------------------------------------------------------------
; 你可以为每个AI任务使用相同的API端点和密钥，或者为每个任务单独配置。
; API格式为OpenAI通用格式。

[ai_general]
; 如果所有AI使用相同的API端点和密钥，可以在这里配置，并在具体AI配置中留空以继承。
; common_api_url = "https://api.openai.com/v1/chat/completions"
; common_api_key = "YOUR_GENERAL_OPENAI_API_KEY"

[ai_news_gathering]
; 新闻获取AI：通过Google Custom Search API等搜索API获取最新新闻并格式清晰的记录下来。
; 如果下面的 api_url 或 api_key 为空, 将尝试使用 ai_general 中的配置
api_url = "https://api.openai.com/v1/chat/completions" ; 或者特定AI服务的URL
api_key = "YOUR_NEWS_GATHERING_API_KEY"                ; 留空以使用 common_api_key
model = "gpt-3.5-turbo"
prompt = """
请你扮演一个专业的新闻研究员。
你的任务是根据我提供的关键词，通过你拥有的搜索工具，在互联网上搜索相关的高质量新闻文章。
你需要注意以下几点：
1.  **时效性**：优先选择最近发生的新闻。
2.  **来源多样性**：尽量从不同且 معتبر的 新闻机构获取信息。
3.  **客观性**：避免包含过多主观臆断或未证实的内容，除非明确指出是观点。
4.  **信息提取**：从每篇文章中提取核心信息：标题、主要内容摘要、原文链接、发布时间和来源机构。
5.  **结构化输出**：请将每条找到的新闻以下列JSON格式组织起来。确保JSON格式正确无误。

关键词："{keywords}"

请搜索并返回不多于5条相关新闻。输出格式如下：
[
  {
    "title": "新闻标题",
    "summary": "新闻主要内容摘要（至少100字）",
    "url": "原文链接",
    "published_at": "发布日期和时间 (YYYY-MM-DD HH:MM:SS 格式，如果能获取到)",
    "source_name": "来源机构名称"
  },
  {
    "title": "...",
    "summary": "...",
    "url": "...",
    "published_at": "...",
    "source_name": "..."
  }
]

如果找不到相关新闻，请返回一个空数组 []。
"""

[ai_news_commenting]
; 新闻评论AI：将新闻获取AI获取到的所有内容进行评论。
api_url = "https://api.openai.com/v1/chat/completions"
api_key = "YOUR_NEWS_COMMENTING_API_KEY"
model = "gpt-3.5-turbo"
prompt = """
你是一位资深新闻评论员，以犀利、独到且中立的视角著称。
现在有一条新闻，内容如下：
标题："{title}"
摘要："{summary}"
来源："{source_name}"
发布时间："{published_at}"

请针对这条新闻，从多个角度进行解读和评论，字数在100到200字之间。
你的评论应该包括但不限于：
1.  新闻事件的潜在影响。
2.  不同立场可能的看法。
3.  事件背后可能的原因或值得关注的方面。
请直接输出评论内容。
"""

[ai_news_summarizing]
; 新闻整理汇总AI：将新闻整理汇总成（markdown＋HTML）的丰富页面显示在网页上。
api_url = "https://api.openai.com/v1/chat/completions"
api_key = "YOUR_NEWS_SUMMARIZING_API_KEY"
model = "gpt-4" ; 建议使用能力更强的模型进行内容生成和排版
prompt = """
你是一位专业的网络内容编辑和排版专家，擅长将复杂信息以美观、易读的方式呈现。
现在有一条新闻的原始信息和AI评论，如下：

**原始新闻信息:**
标题："{title}"
摘要："{summary}"
来源："{source_name}"
原文链接："{url}"
发布时间："{published_at}"

**AI评论:**
"{ai_comment}"

你的任务是：
1.  **内容增强与排版**：基于以上信息，生成一段适合在网页上展示的HTML内容。
    *   HTML内容应该包含原始新闻的核心信息，但可以进行适当的润色、扩展或重组，使其更具可读性。
    *   你可以使用Markdown语法来丰富文本表现力（例如标题、列表、加粗、引用等），然后将其转换为HTML。 **最终输出必须是HTML片段，而不是Markdown字符串。**
    *   考虑新闻的重要性和复杂性，你可以选择不同的呈现形式，例如：
        *   **标准文章式**：适合大多数新闻。
        *   **时间线式**：如果事件有明显的时间发展顺序。
        *   **多方观点对比式**：如果事件涉及多个争议方。
        *   **问答式**：通过设问和解答来阐述事件。
    *   如果原始摘要信息量较少，可以适当扩充内容，但必须基于事实，避免编造。
    *   确保HTML结构清晰，语义正确。可以适当使用 `<div>`, `<p>`, `<ul>`, `<li>`, `<blockquote>`, `<strong>`, `<em>` 等标签。
    *   **不要包含 `<html>`, `<head>`, `<body>` 标签，只输出新闻内容部分的HTML片段。**
2.  **图片建议（可选）**：如果新闻内容适合配图，请在输出的HTML中，在你认为合适的位置，插入一个占位图片标签，格式为：`<img src="placeholder_image.jpg" alt="[图片描述，AI根据新闻内容生成]">`。AI不需要真的去寻找图片，只需要给出占位符和描述即可。

请严格按照要求，只输出最终的HTML内容片段。
例如：
`<h3>{title}</h3><p><strong>来源:</strong> {source_name} | <strong>发布时间:</strong> {published_at}</p><div>{enhanced_summary_and_details_in_html_format}</div><img src="placeholder_image.jpg" alt="AI生成的图片描述"><p><a href='{url}' target='_blank'>阅读原文</a></p>`
"""


; -----------------------------------------------------------------------------
; 新闻获取配置
; -----------------------------------------------------------------------------
[news_sources]
; 用户想要看到的新闻方面，可以是宽泛的领域，也可以是具体事件。
; 多个关键词用英文逗号 "," 分隔。AI新闻获取时会轮流或随机选取一个进行搜索。
keywords = "科技最新进展,国际财经动态,巴以冲突最新消息,人工智能发展趋势,环境保护政策"

; Google Custom Search API 配置 (如果使用)
google_search_api_key = "YOUR_GOOGLE_SEARCH_API_KEY"
google_search_cx_id = "YOUR_GOOGLE_SEARCH_CX_ID"
search_api_provider = "google" ; 'google' or other if implemented

; -----------------------------------------------------------------------------
; RSS 新闻配置
; -----------------------------------------------------------------------------
[rss]
; RSS源URL列表，每行一个
; enabled = true ; 是否启用RSS功能
rss_urls[] = "http://feeds.bbci.co.uk/zhongwen/simp/rss.xml"
rss_urls[] = "https://www.zhihu.com/rss"
rss_urls[] = "https://www.solidot.org/index.rss"

; 每次从每个RSS源获取的最新文章数量
articles_per_feed = 5

; RSS新闻的AI摘要和评论提示词 (如果希望与普通新闻不同，可以在这里单独配置)
; 如果留空，将使用 ai_news_commenting 和 ai_news_summarizing 的提示词，但上下文变量可能需要调整。
rss_ai_comment_prompt = """
你是一位资深新闻评论员。这是一篇RSS订阅文章：
标题："{title}"
链接："{link}"
发布日期："{pubDate}"
内容摘要/描述："{description}"

请针对这篇文章，从多个角度进行解读和评论，字数在80到150字之间。
你的评论应该侧重于文章的核心观点、潜在影响或值得读者思考的方面。
请直接输出评论内容。
"""

rss_ai_summary_prompt = """
你是一位专业的网络内容编辑，擅长将RSS文章内容进行精炼和排版。
这是一篇RSS订阅文章的原始信息和AI评论：

**原始RSS文章信息:**
标题："{title}"
链接："{link}"
发布日期："{pubDate}"
描述/摘要："{description}"
{(isset($content) && !empty($content)) ? "内容片段：\n" . $content . "\n" : ""}
**AI评论:**
"{ai_comment}"

你的任务是：
1.  **内容整理与呈现**：基于以上信息，生成一段适合在网页上展示的HTML内容。
    *   HTML内容应该清晰地展示文章的标题、核心摘要。如果原始描述过短，尝试从内容片段中提取更多信息。
    *   将AI评论融入展示中。
    *   提供原文链接。
    *   使用Markdown语法来丰富文本表现力，然后将其转换为HTML。**最终输出必须是HTML片段。**
    *   **不要包含 `<html>`, `<head>`, `<body>` 标签，只输出内容部分的HTML片段。**
例如：
`<h4>{title}</h4><p><small>发布于: {pubDate}</small></p><div>{formatted_description_or_summary_in_html}</div><blockquote><p><strong>AI点评:</strong> {ai_comment}</p></blockquote><p><a href="{link}" target="_blank">阅读原文</a></p>`
"""

; -----------------------------------------------------------------------------
; 定时任务 (Cron Job)
; -----------------------------------------------------------------------------
[cron]
; 这里不是直接配置定时任务，而是给用户提供建议
; 建议用户在宝塔面板或其他cron工具中设置如下命令：
; /usr/bin/php /path/to/your/news-from-ai/public/cron_runner.php > /dev/null 2>&1
;
; 频率建议:
; - 对于AI搜索新闻: 可以每1小时或每几小时执行一次，取决于新闻更新速度和API调用成本。
; - 对于RSS新闻: 可以每30分钟或每1小时执行一次。
fetch_ai_news_interval_minutes = 120 ; AI新闻获取间隔建议（分钟）
fetch_rss_news_interval_minutes = 60  ; RSS新闻获取间隔建议（分钟）

; -----------------------------------------------------------------------------
; 开发者选项
; -----------------------------------------------------------------------------
[developer]
debug_mode = true ; 开启后可能会输出更多调试信息
maintenance_mode = false ; 维护模式，网站将显示维护页面
; placeholder_image_url = "https://via.placeholder.com/600x400.png?text=News+Image+Placeholder" ; AI建议图片时使用的占位符URL
placeholder_image_url = "public/images/placeholder.png" ; 建议使用本地占位图，减少外部依赖和提高加载速度
